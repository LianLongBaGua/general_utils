import pandas as pd
import talib


def prepare_ta_features(df: pd.DataFrame, momentum: bool = True, volatility: bool = True, math: bool = True, oscillation: bool = True, trend: bool = True, volume: bool = True, pattern: bool = True):
    """
    Prepare the technical indicators
    """
    df = df.copy()

    if momentum:
        df['ROC7'] = talib.ROC(df.close, 7)
        df['ROC25'] = talib.ROC(df.close, 25)
        df['ROC50'] = talib.ROC(df.close, 50)
        df['ROC75'] = talib.ROC(df.close, 75)
        df['ROC100'] = talib.ROC(df.close, 100)
        df['MOM30'] = talib.MOM(df.close, 30)
        df['MOM50'] = talib.MOM(df.close, 50)
        df['MOM75'] = talib.MOM(df.close, 75)
        df['MOM100'] = talib.MOM(df.close, 100)
        df['PLUSDM30'] = talib.PLUS_DM(df.high, df.low, 30)
        df['PLUSDM50'] = talib.PLUS_DM(df.high, df.low, 50)
        df['PLUSDM75'] = talib.PLUS_DM(df.high, df.low, 75)
        df['PLUSDM100'] = talib.PLUS_DM(df.high, df.low, 100)
        df['MINUSDM30'] = talib.MINUS_DM(df.high, df.low, 30)
        df['MINUSDM50'] = talib.MINUS_DM(df.high, df.low, 50)
        df['MINUSDM75'] = talib.MINUS_DM(df.high, df.low, 75)
        df['MINUSDM100'] = talib.MINUS_DM(df.high, df.low, 100)
        df['ADX7'] = talib.ADX(df.high, df.low, df.close, 7)
        df['ADX14'] = talib.ADX(df.high, df.low, df.close, 14)
        df['ADX30'] = talib.ADX(df.high, df.low, df.close, 30)
        df['ADX50'] = talib.ADX(df.high, df.low, df.close, 50)
        df['ADX75'] = talib.ADX(df.high, df.low, df.close, 75)
        df['ADX100'] = talib.ADX(df.high, df.low, df.close, 100)
        df['ADXR7'] = talib.ADXR(df.high, df.low, df.close, 7)
        df['ADXR14'] = talib.ADXR(df.high, df.low, df.close, 14)
        df['ADXR30'] = talib.ADXR(df.high, df.low, df.close, 30)
        df['ADXR50'] = talib.ADXR(df.high, df.low, df.close, 50)
        df['ADXR75'] = talib.ADXR(df.high, df.low, df.close, 75)
        df['ADXR100'] = talib.ADXR(df.high, df.low, df.close, 100)
        df['APO12'] = talib.APO(df.close, 12, 26)
        df['APO26'] = talib.APO(df.close, 26, 38)
        df['APO50'] = talib.APO(df.close, 50, 100)
        df['APO100'] = talib.APO(df.close, 100, 200)
        df['AROONOSC7'] = talib.AROONOSC(df.high, df.low, 7)
        df['AROONOSC14'] = talib.AROONOSC(df.high, df.low, 14)
        df['AROONOSC30'] = talib.AROONOSC(df.high, df.low, 30)
        df['AROONOSC50'] = talib.AROONOSC(df.high, df.low, 50)
        df['AROONOSC75'] = talib.AROONOSC(df.high, df.low, 75)
        df['AROONOSC100'] = talib.AROONOSC(df.high, df.low, 100)
        df['BOP'] = talib.BOP(df.open, df.high, df.low, df.close)
        df['CCI7'] = talib.CCI(df.high, df.low, df.close, 7)
        df['CCI14'] = talib.CCI(df.high, df.low, df.close, 14)
        df['CCI30'] = talib.CCI(df.high, df.low, df.close, 30)
        df['CCI50'] = talib.CCI(df.high, df.low, df.close, 50)
        df['CCI75'] = talib.CCI(df.high, df.low, df.close, 75)
        df['CCI100'] = talib.CCI(df.high, df.low, df.close, 100)
        df['CMO7'] = talib.CMO(df.close, 7)
        df['CMO14'] = talib.CMO(df.close, 14)
        df['CMO30'] = talib.CMO(df.close, 30)
        df['CMO50'] = talib.CMO(df.close, 50)
        df['CMO75'] = talib.CMO(df.close, 75)
        df['CMO100'] = talib.CMO(df.close, 100)
        df['DX7'] = talib.DX(df.high, df.low, df.close, 7)
        df['DX14'] = talib.DX(df.high, df.low, df.close, 14)
        df['DX30'] = talib.DX(df.high, df.low, df.close, 30)
        df['DX50'] = talib.DX(df.high, df.low, df.close, 50)
        df['DX75'] = talib.DX(df.high, df.low, df.close, 75)
        df['DX100'] = talib.DX(df.high, df.low, df.close, 100)
        df['MACD'], df['MACDSIGNAL'], df['MACDHIST'] = talib.MACD(df.close, 12, 26, 9)
        df['MACDEXT'], df['MACDSIGNALEXT'], df['MACDHISTEXT'] = talib.MACDEXT(df.close, 12, 26, 9)
        df['MACDFIX'], df['MACDSIGNALFIX'], df['MACDHISTFIX'] = talib.MACDFIX(df.close, 12, 26, 9)
        df['PPO12'] = talib.PPO(df.close, 12, 26)
        df['PPO26'] = talib.PPO(df.close, 26, 38)
        df['PPO50'] = talib.PPO(df.close, 50, 100)
        df['PPO100'] = talib.PPO(df.close, 100, 200)

    if trend:
        _, df['DEA'], df['MACD'] = talib.MACD(df.close, 12, 26, 9)

    if volatility:
        df['NATR14'] = talib.NATR(df.high, df.low, df.close, 14)
        df['NATR30'] = talib.NATR(df.high, df.low, df.close, 30)
        df['NATR50'] = talib.NATR(df.high, df.low, df.close, 50)
        df['NATR75'] = talib.NATR(df.high, df.low, df.close, 75)
        df['NATR100'] = talib.NATR(df.high, df.low, df.close, 100)
        # df['KELTNER14'] = (df.close - talib.SMA(df.close, 14)) / df['ATR14']
        # df['KELTNER30'] = (df.close - talib.SMA(df.close, 30)) / df['ATR30']
        # df['KELTNER50'] = (df.close - talib.SMA(df.close, 50)) / df['ATR50']
        # df['KELTNER75'] = (df.close - talib.SMA(df.close, 75)) / df['ATR75']
        # df['KELTNER100'] = (df.close - talib.SMA(df.close, 100)) / df['ATR100']

    if oscillation:
        df['RSI7'] = talib.RSI(df.close, 7) 
        df['RSI12'] = talib.RSI(df.close, 12) 
        df['RSI30'] = talib.RSI(df.close, 30)
        df['RSI50'] = talib.RSI(df.close, 50)
        df['RSI75'] = talib.RSI(df.close, 75)
        df['RSI100'] = talib.RSI(df.close, 100)
        df['ULTOSC'] = talib.ULTOSC(df.high, df.low, df.close, 7, 14, 28)
        df['WILLR14'] = talib.WILLR(df.high, df.low, df.close, 14)
        df['STOCHRSI14k'], df['STOCHRSI14d'] = talib.STOCHRSI(df.close, 14, 3, 3)
        df['STOCHRSI30k'], df['STOCHRSI30d'] = talib.STOCHRSI(df.close, 30, 3, 3)
        df['STOCHRSI50k'], df['STOCHRSI50d'] = talib.STOCHRSI(df.close, 50, 3, 3)
        df['STOCHRSI75k'], df['STOCHRSI75d'] = talib.STOCHRSI(df.close, 75, 3, 3)
        df['STOCHRSI100k'], df['STOCHRSI100d'] = talib.STOCHRSI(df.close, 100, 3, 3)
        df['HT_TRENDLINE'] = talib.HT_TRENDLINE(df.close)
        df['HT_TRENDMODE'] = talib.HT_TRENDMODE(df.close)
        df['HT_DCPERIOD'] = talib.HT_DCPERIOD(df.close)
        df['HT_DCPHASE'] = talib.HT_DCPHASE(df.close)
        df['HT_PHASORinphase'], df['HT_PHASORquadrature'] = talib.HT_PHASOR(df.close)
        df['HT_SINEsine'], df['HT_SINEleadsine'] = talib.HT_SINE(df.close)

    if volume:
        df['OBV'] = talib.OBV(df.close, df.volume)
        df['ADOSC'] = talib.ADOSC(df.high, df.low, df.close, df.volume, 3, 10)
        df['AD'] = talib.AD(df.high, df.low, df.close, df.volume)
        df['MFI25'] = talib.MFI(df.high, df.low, df.close, df.volume, 20)
        df['MFI50'] = talib.MFI(df.high, df.low, df.close, df.volume, 50)
        df['MFI75'] = talib.MFI(df.high, df.low, df.close, df.volume, 75)
        df['MFI100'] = talib.MFI(df.high, df.low, df.close, df.volume, 100)

    if math:
        df['BETA5'] = talib.BETA(df.high, df.low, 5)
        df['BETA10'] = talib.BETA(df.high, df.low, 10)
        df['BETA20'] = talib.BETA(df.high, df.low, 20)
        df['BETA30'] = talib.BETA(df.high, df.low, 30)
        df['BETA50'] = talib.BETA(df.high, df.low, 50)
        df['BETA75'] = talib.BETA(df.high, df.low, 75)
        df['BETA100'] = talib.BETA(df.high, df.low, 100)
        df['CORREL30'] = talib.CORREL(df.high, df.low, 30)
        df['CORREL50'] = talib.CORREL(df.high, df.low, 50)
        df['CORREL75'] = talib.CORREL(df.high, df.low, 75)
        df['CORREL100'] = talib.CORREL(df.high, df.low, 100)
        df['LINEARREG5'] = talib.LINEARREG(df.close, 5)
        df['LINEARREG10'] = talib.LINEARREG(df.close, 10)
        df['LINEARREG20'] = talib.LINEARREG(df.close, 20)
        df['LINEARREG30'] = talib.LINEARREG(df.close, 30)
        df['LINEARREG50'] = talib.LINEARREG(df.close, 50)
        df['LINEARREG75'] = talib.LINEARREG(df.close, 75)
        df['LINEARREG100'] = talib.LINEARREG(df.close, 100)
        df['LINEARREG_ANGLE5'] = talib.LINEARREG_ANGLE(df.close, 5)
        df['LINEARREG_ANGLE10'] = talib.LINEARREG_ANGLE(df.close, 10)
        df['LINEARREG_ANGLE20'] = talib.LINEARREG_ANGLE(df.close, 20)
        df['LINEARREG_ANGLE30'] = talib.LINEARREG_ANGLE(df.close, 30)
        df['LINEARREG_ANGLE50'] = talib.LINEARREG_ANGLE(df.close, 50)
        df['LINEARREG_ANGLE75'] = talib.LINEARREG_ANGLE(df.close, 75)
        df['LINEARREG_ANGLE100'] = talib.LINEARREG_ANGLE(df.close, 100)
        df['LINEARREG_INTERCEPT5'] = talib.LINEARREG_INTERCEPT(df.close, 5)
        df['LINEARREG_INTERCEPT10'] = talib.LINEARREG_INTERCEPT(df.close, 10)
        df['LINEARREG_INTERCEPT20'] = talib.LINEARREG_INTERCEPT(df.close, 20)
        df['LINEARREG_INTERCEPT30'] = talib.LINEARREG_INTERCEPT(df.close, 30)
        df['LINEARREG_INTERCEPT50'] = talib.LINEARREG_INTERCEPT(df.close, 50)
        df['LINEARREG_INTERCEPT75'] = talib.LINEARREG_INTERCEPT(df.close, 75)
        df['LINEARREG_INTERCEPT100'] = talib.LINEARREG_INTERCEPT(df.close, 100)
        df['LINEARREG_SLOPE5'] = talib.LINEARREG_SLOPE(df.close, 5)
        df['LINEARREG_SLOPE10'] = talib.LINEARREG_SLOPE(df.close, 10)
        df['LINEARREG_SLOPE20'] = talib.LINEARREG_SLOPE(df.close, 20)
        df['LINEARREG_SLOPE30'] = talib.LINEARREG_SLOPE(df.close, 30)
        df['LINEARREG_SLOPE50'] = talib.LINEARREG_SLOPE(df.close, 50)
        df['LINEARREG_SLOPE75'] = talib.LINEARREG_SLOPE(df.close, 75)
        df['LINEARREG_SLOPE100'] = talib.LINEARREG_SLOPE(df.close, 100)
        df['STDDEV'] = talib.STDDEV(df.close, 5)
        df['TSF5'] = talib.TSF(df.close, 5)
        df['TSF10'] = talib.TSF(df.close, 10)
        df['TSF20'] = talib.TSF(df.close, 20)
        df['TSF30'] = talib.TSF(df.close, 30)
        df['TSF50'] = talib.TSF(df.close, 50)
        df['TSF75'] = talib.TSF(df.close, 75)
        df['TSF100'] = talib.TSF(df.close, 100)
        df['VAR'] = talib.VAR(df.close)

    if pattern:
        df['CDL2CROWS'] = talib.CDL2CROWS(df.open, df.high, df.low, df.close)
        df['CDL3BLACKCROWS'] = talib.CDL3BLACKCROWS(df.open, df.high, df.low, df.close)
        df['CDL3INSIDE'] = talib.CDL3INSIDE(df.open, df.high, df.low, df.close)
        df['CDL3LINESTRIKE'] = talib.CDL3LINESTRIKE(df.open, df.high, df.low, df.close)
        df['CDL3OUTSIDE'] = talib.CDL3OUTSIDE(df.open, df.high, df.low, df.close)
        df['CDL3STARSINSOUTH'] = talib.CDL3STARSINSOUTH(df.open, df.high, df.low, df.close)
        df['CDL3WHITESOLDIERS'] = talib.CDL3WHITESOLDIERS(df.open, df.high, df.low, df.close)
        df['CDLABANDONEDBABY'] = talib.CDLABANDONEDBABY(df.open, df.high, df.low, df.close)
        df['CDLADVANCEBLOCK'] = talib.CDLADVANCEBLOCK(df.open, df.high, df.low, df.close)
        df['CDLBELTHOLD'] = talib.CDLBELTHOLD(df.open, df.high, df.low, df.close)
        df['CDLBREAKAWAY'] = talib.CDLBREAKAWAY(df.open, df.high, df.low, df.close)
        df['CDLCLOSINGMARUBOZU'] = talib.CDLCLOSINGMARUBOZU(df.open, df.high, df.low, df.close)

        df['CDLCONCEALBABYSWALL'] = talib.CDLCONCEALBABYSWALL(df.open, df.high, df.low, df.close)
        df['CDLCOUNTERATTACK'] = talib.CDLCOUNTERATTACK(df.open, df.high, df.low, df.close)
        df['CDLDARKCLOUDCOVER'] = talib.CDLDARKCLOUDCOVER(df.open, df.high, df.low, df.close)
        df['CDLDOJI'] = talib.CDLDOJI(df.open, df.high, df.low, df.close)
        df['CDLDOJISTAR'] = talib.CDLDOJISTAR(df.open, df.high, df.low, df.close)
        df['CDLDRAGONFLYDOJI'] = talib.CDLDRAGONFLYDOJI(df.open, df.high, df.low, df.close)
        df['CDLENGULFING'] = talib.CDLENGULFING(df.open, df.high, df.low, df.close)
        df['CDLEVENINGDOJISTAR'] = talib.CDLEVENINGDOJISTAR(df.open, df.high, df.low, df.close)
        df['CDLEVENINGSTAR'] = talib.CDLEVENINGSTAR(df.open, df.high, df.low, df.close)
        df['CDLGAPSIDESIDEWHITE'] = talib.CDLGAPSIDESIDEWHITE(df.open, df.high, df.low, df.close)
        df['CDLGRAVESTONEDOJI'] = talib.CDLGRAVESTONEDOJI(df.open, df.high, df.low, df.close)
        df['CDLHAMMER'] = talib.CDLHAMMER(df.open, df.high, df.low, df.close)

        df['CDLHANGINGMAN'] = talib.CDLHANGINGMAN(df.open, df.high, df.low, df.close)
        df['CDLHARAMI'] = talib.CDLHARAMI(df.open, df.high, df.low, df.close)
        df['CDLHARAMICROSS'] = talib.CDLHARAMICROSS(df.open, df.high, df.low, df.close)
        df['CDLHIGHWAVE'] = talib.CDLHIGHWAVE(df.open, df.high, df.low, df.close)
        df['CDLHIKKAKE'] = talib.CDLHIKKAKE(df.open, df.high, df.low, df.close)
        df['CDLHIKKAKEMOD'] = talib.CDLHIKKAKEMOD(df.open, df.high, df.low, df.close)
        df['CDLHOMINGPIGEON'] = talib.CDLHOMINGPIGEON(df.open, df.high, df.low, df.close)
        df['CDLIDENTICAL3CROWS'] = talib.CDLIDENTICAL3CROWS(df.open, df.high, df.low, df.close)
        df['CDLINNECK'] = talib.CDLINNECK(df.open, df.high, df.low, df.close)
        df['CDLINVERTEDHAMMER'] = talib.CDLINVERTEDHAMMER(df.open, df.high, df.low, df.close)
        df['CDLKICKING'] = talib.CDLKICKING(df.open, df.high, df.low, df.close)
        
        df['CDLKICKINGBYLENGTH'] = talib.CDLKICKINGBYLENGTH(df.open, df.high, df.low, df.close)
        df['CDLLADDERBOTTOM'] = talib.CDLLADDERBOTTOM(df.open, df.high, df.low, df.close)
        df['CDLLONGLEGGEDDOJI'] = talib.CDLLONGLEGGEDDOJI(df.open, df.high, df.low, df.close)
        df['CDLLONGLINE'] = talib.CDLLONGLINE(df.open, df.high, df.low, df.close)
        df['CDLMARUBOZU'] = talib.CDLMARUBOZU(df.open, df.high, df.low, df.close)
        df['CDLMATCHINGLOW'] = talib.CDLMATCHINGLOW(df.open, df.high, df.low, df.close)
        df['CDLMATHOLD'] = talib.CDLMATHOLD(df.open, df.high, df.low, df.close)
        df['CDLMORNINGDOJISTAR'] = talib.CDLMORNINGDOJISTAR(df.open, df.high, df.low, df.close)
        df['CDLMORNINGSTAR'] = talib.CDLMORNINGSTAR(df.open, df.high, df.low, df.close)
        df['CDLONNECK'] = talib.CDLONNECK(df.open, df.high, df.low, df.close)
        df['CDLPIERCING'] = talib.CDLPIERCING(df.open, df.high, df.low, df.close)
        df['CDLRICKSHAWMAN'] = talib.CDLRICKSHAWMAN(df.open, df.high, df.low, df.close)

        df['CDLRISEFALL3METHODS'] = talib.CDLRISEFALL3METHODS(df.open, df.high, df.low, df.close)
        df['CDLSEPARATINGLINES'] = talib.CDLSEPARATINGLINES(df.open, df.high, df.low, df.close)
        df['CDLSHOOTINGSTAR'] = talib.CDLSHOOTINGSTAR(df.open, df.high, df.low, df.close)
        df['CDLSHORTLINE'] = talib.CDLSHORTLINE(df.open, df.high, df.low, df.close)
        df['CDLSPINNINGTOP'] = talib.CDLSPINNINGTOP(df.open, df.high, df.low, df.close)
        df['CDLSTALLEDPATTERN'] = talib.CDLSTALLEDPATTERN(df.open, df.high, df.low, df.close)
        df['CDLSTICKSANDWICH'] = talib.CDLSTICKSANDWICH(df.open, df.high, df.low, df.close)
        df['CDLTAKURI'] = talib.CDLTAKURI(df.open, df.high, df.low, df.close)
        df['CDLTASUKIGAP'] = talib.CDLTASUKIGAP(df.open, df.high, df.low, df.close)
        df['CDLTHRUSTING'] = talib.CDLTHRUSTING(df.open, df.high, df.low, df.close)
        df['CDLTRISTAR'] = talib.CDLTRISTAR(df.open, df.high, df.low, df.close)
        df['CDLUNIQUE3RIVER'] = talib.CDLUNIQUE3RIVER(df.open, df.high, df.low, df.close)
        df['CDLUPSIDEGAP2CROWS'] = talib.CDLUPSIDEGAP2CROWS(df.open, df.high, df.low, df.close)
        df['CDLXSIDEGAP3METHODS'] = talib.CDLXSIDEGAP3METHODS(df.open, df.high, df.low, df.close)

    df = df.dropna()

    return df